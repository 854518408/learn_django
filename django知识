9.23
核心:高内聚(视图之间联系功能紧密,即模块底层之间联系紧密),低耦合(各司其职,模块与模块之间联系不紧密)
科技公司:总经理办公室 人事  财务  开发部  测试   运营



manage.py:项目整体的管理文件,通过它管理整个项目
项目同名文件夹:
	Setting.py:项目整体的配置文件夹
	urls.py:项目url配置文件
	wsgi.py:项目与web服务器的入口

debug=True: 意思就是服务器在不断重启,不需要手动重启,仅限于开发环境
	    在上线环境需要改回debug=False设置

模块文件(比如index):
admin.py:后台管理站点的配置
apps.py:当前子应用的信息
models.py:保存书写的数据库模型
tests.py:用来保存开发测试用例的,进行单元测试
views.py:书写逻辑的保存视图

如果新加入字段,需要设置默认值或者允许为空


9.24
pytharm 自带了mysql可视化图形界面,最右边第二个
一个视图函数可以当做一个接口,返回数据给服务器,服务器拼接报文
正则表达式以^开头,以$结尾
视图函数需要一个参数,承接框架给它的对象

简单的index视图函数流程
客户端发送请求,服务器接受请求报文,解析出请求的路径地址;
先在项目所在的同名文件夹下的urls.py中进行地址的匹配;
判断是否匹配成功,没有成功则报错返回404状态码,未找到指定的路径;
成功则找到对应的视图,执行视图的内容;无论成功与否,都会将响应返回给前端页面

render实际上返回的是django.template.loader.render_to_string（）和传递的参数。也是HttpReaponse对象

一对多添加到多的一方
#auto_now=False(表示保存对象时自动设置该字段为当前时间,用于做最后一次修改的时间戳)  
#auto_now_add=False(表示当前对象第一次被创建时自动设置当前时间,用于创建的时间戳)

on_delete=None,               # 删除关联表中的数据时,当前表与其关联的field的行为
on_delete=models.CASCADE,     # 删除关联数据,与之关联也删除
on_delete=models.DO_NOTHING,  # 删除关联数据,什么也不做
on_delete=models.PROTECT,     # 删除关联数据,引发错误ProtectedError
# models.ForeignKey('关联表', on_delete=models.SET_NULL, blank=True, null=True)
on_delete=models.SET_NULL,    # 删除关联数据,与之关联的值设置为null（前提FK字段需要设置为可空,一对一同理）
# models.ForeignKey('关联表', on_delete=models.SET_DEFAULT, default='默认值')
on_delete=models.SET_DEFAULT, # 删除关联数据,与之关联的值设置为默认值（前提FK字段需要设置默认值,一对一同理）
on_delete=models.SET,         # 删除关联数据,


models中的CRUD
C:example1:     obj=UserInfo(bookname='',...)
		obj.save()
  example2:     obj.objects.create(bookname='',...)
 
U:example1:	obj.onjects.get(id=3)
		obj.bookname=''
		obj.save()
  example2:	obj.objects.filter(id=3).update(bookname='')


9.25
查询数据的过滤
obj.objects.filter(age__gt=20)
参数说明:__gt:大于
	__gte:大于等于
	__lt:小于
	__lte:小于等于
	__contains:带有那个字符串
	__icontains:带有那个字符串,忽略大小写
	__startswith:以...开头
	__istartswith:以...开头,忽略大小写
	__in:存在于一个list范围内
	__endswith:以...结尾,忽略大小写
	__iendswith:以...结尾,忽略大小写
	__range:在...范围内 可以是tuple 也可以是 list
	__year 日期字段的年份
	__month 日期字段的月份
	__day 日期字段的日
	__exact:精确等于
	__iexact:忽略大小写,精确等于
	
	
9.26
不使用django ORM
当不使用ORM对象模型映射时,可以有其他的方式连接数据库
第一种是pymysql,mysql数据库会讲到
第二种是django的db包中的connection
from django.db import connection
cur = connection.cursor()
    conn=cur.execute('select * from userInfo;')
    for obj in cur.fetchall():
        print(obj)
    print(type(conn))

#不用写数据库连接说明,因为以及在settings.py文件夹中写了
返回的obj是元祖

第三种是sqlalchemy 模块
链接地址为:https://www.jianshu.com/p/637ede0939d1 还可以理解


9.28
重写Manager管理器方法
自定义类名,使之继承models.Manager类
    def all(self):
        return super().filter(is_deleted=False)

    def my_create(self,bookname,publictime):
        print('这是进行定义的创建方法')
        print(self.model)
        obj=self.model()
        obj.bookname=bookname
        obj.publictime=publictime
        obj.save()
        return obj
在重写父类中已出现的方法即可,并且还要在对应的模型类中注册
book_manager=BookManager()
book_manager为注册的名字,BookManager为自定义的类名
注册成功以后即可用obj.book_manager.all()
		obj.book_manager.my_create()使用了
此时以不能使用obj.objects....原来的manager管理器了



url路径匹配参数
url(r'^deletebook/(?P<id>\d+)$',Delete.as_view()),
deletebook为路径名,此路径还需要加一个参数,该参数用id绑定,在视图层便可在def deletebook(request,id)后面
继续加参数了.



9.29
drf 是基于Django框架开发的二次框架
主要功能是让Django框架变成前后端分离模式
前端有自己的静态文件服务器
后端专门写自己的服务器,前端不再是网页,还可以是app等其他客户端
前端刚开始向自己的静态文件服务器要静态文件html,css,js,在通过后端
已经专门写好的api接口,前端通过请求对应的接口拿到自己想要的数据,通过js操作让静态html页面动态显示


由于设置url接口路径时每个人的风格不一样,因此需要定义一个标准的接口url设计风格,所以restful 出现了:定义接口规范

关于域名:尽量的将api部署到专用的域名下面
http://api.example.com
版本:将版本号放入到url中,根据公司来
https://passport.baidu.com/v2/api/?login
路径:资源作为网址,一般情况下只能有名词
GET /goods 展示所有的商品  列表页
GET /goods/9  获取id为9的详细信息 详情页
PUT /goods/9  更新某一个商品 路径一样,请求方式不一样

